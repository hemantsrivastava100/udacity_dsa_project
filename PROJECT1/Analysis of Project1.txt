** Run time Analysis
This file explains the n time analysis (Worst Case Big O Notation) for each solution they produced. 
Analysis will leave apart the load of the current files, and focus on the __algorithm execution__.
[Python time complexity](https://wiki.python.org/moin/TimeComplexity), information has been used as
a reference.

** Task0
This takes runs in __O(1)__, due to the fact that _access_ on a Python array has O(1), and there are
two lines executing accesses to lists.

** Task1
This takes runs in __O(n)__, due to the fact that we access sequentially both files for two of their
columns, resulting in `2*2*O(n) -> O(n)`.

** Task2
This takes runs in __O(n)__, due to the fact that we find many operations that are __O(1)__ as
the different elements are modified. Additionally there are several _full scans thorough the lists_,
which have __O(n)__ time complexity. Though they add up to some value of `x * O(n)`, we end up
simplifying them into `O(n)`.

** Task3
This takes runs in __O(n log n)__, due to the fact that we find list sorting operations, which have
a time complexity of __O(n log n)__. In the code we find many operations that are __O(1)__ as
the different elements are modified. Additionally there are several _full scans thorough the lists_,
which have __O(n)__ time complexity. Though they all add up to some value of `x * O(n) + `O(n log n)`,
we end up simplifying them into `O(n log n)`.

** Task4
This takes runs in __O(n log n)__, due to the fact that we find list sorting operations, which have
a time complexity of __O(n log n)__. In the code we find many operations that are __O(1)__ as
the different elements are modified. Additionally there are several _full scans thorough the lists_,
which have __O(n)__ time complexity. Though they all add up to some value of `x * O(n) + `O(n log n)`,
we end up simplifying them into `O(n log n)`.
